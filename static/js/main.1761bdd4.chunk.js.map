{"version":3,"sources":["components/Nav.js","components/Error.js","components/Jumbo.js","components/Features.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["Nav","react_default","a","createElement","id","class","Component","Error","Jumbo","filePath","console","log","this","props","movies","length","Jumbotron_default","title","src","backdrop_path","alt","components_Error","Features","_this2","map","movie","i","key","poster_path","Main","table","top20","undefined","components_Jumbo","components_Features","App","state","getPopularMovies","components_Nav","components_Main","response","fetch","then","json","setState","results","catch","err","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6TAmBeA,0LAdX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,GAAG,OACNH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,KAAGC,GAAG,cAAN,SAEFH,EAAAC,EAAAC,cAAA,OAAKC,GAAG,eACNH,EAAAC,EAAAC,cAAA,KAAGE,MAAM,cAAT,UACAJ,EAAAC,EAAAC,cAAA,KAAGE,MAAM,cAAT,eATQC,cCSHC,mLARX,OACEN,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,kDAJYG,sCCwBLE,6MApBbC,SAAW,6GAGT,OADAC,QAAQC,IAAIC,KAAKC,MAAMC,QACnBF,KAAKC,MAAMC,OAAOC,OAAS,EAE3Bd,EAAAC,EAAAC,cAACa,EAAAd,EAAD,CAAWE,GAAG,aACZH,EAAAC,EAAAC,cAAA,MAAIC,GAAG,eAAeQ,KAAKC,MAAMC,OAAO,GAAGG,OAC3ChB,EAAAC,EAAAC,cAAA,OACEC,GAAG,cACHc,IAAKN,KAAKH,SAAWG,KAAKC,MAAMC,OAAO,GAAGK,cAC1CC,IAAI,kBAKHnB,EAAAC,EAAAC,cAACkB,EAAD,aAhBOf,aCcLgB,oNAfbb,SAAW,yGACF,IAAAc,EAAAX,KACP,OACEX,EAAAC,EAAAC,cAAA,OAAKC,GAAG,YACLQ,KAAKC,MAAMC,OAAOU,IAAI,SAACC,EAAOC,GAAR,OACrBzB,EAAAC,EAAAC,cAAA,OAAKE,MAAM,UAAUsB,IAAKD,GACxBzB,EAAAC,EAAAC,cAAA,OAAKe,IAAKK,EAAKd,SAAWgB,EAAMG,YAAaR,IAAI,iBACjDnB,EAAAC,EAAAC,cAAA,SAAIsB,EAAMR,kBARCX,cCqBRuB,mLAjBX,OADAnB,QAAQoB,MAAMlB,KAAKC,MAAMkB,YACAC,IAArBpB,KAAKC,MAAMkB,MAEX9B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC8B,EAAD,CAAOnB,OAAQF,KAAKC,MAAMkB,QAC1B9B,EAAAC,EAAAC,cAAC+B,EAAD,CAAUpB,OAAQF,KAAKC,MAAMkB,SAK/B9B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,yCAbSG,aCoCJ6B,oNAlCbC,MAAQ,CACNL,MAAO,uFAIPnB,KAAKyB,oDAIL,OACEpC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACmC,EAAD,MACArC,EAAAC,EAAAC,cAACoC,EAAD,CAAMR,MAAOnB,KAAKwB,MAAML,2CAKpBS,GACR9B,QAAQC,IAAI6B,8CAGK,IAAAjB,EAAAX,KACjB6B,MAAK,gHAGFC,KAAK,SAAAF,GAAQ,OAAIA,EAASG,SAC1BD,KACC,SAAAF,GAAQ,OAAIjB,EAAKqB,SAAS,CAAEb,MAAOS,EAASK,WAC5CnC,QAAQoB,MAAMlB,KAAKwB,MAAML,QAE1Be,MAAM,SAAAC,GAAG,OAAIrC,QAAQC,IAAI,QAASoC,YA/BvBzC,cCOE0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrD,EAAAC,EAAAC,cAACoD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlB,KAAK,SAAAmB,GACjCA,EAAaC","file":"static/js/main.1761bdd4.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"../styles/nav.css\";\n\nclass Nav extends Component {\n  render() {\n    return (\n      <nav id=\"nav\">\n        <div>\n          <p id=\"brand-name\">Flic</p>\n        </div>\n        <div id=\"nav-buttons\">\n          <p class=\"nav-button\">Cinema</p>\n          <p class=\"nav-button\">VR</p>\n        </div>\n      </nav>\n    );\n  }\n}\n\nexport default Nav;\n","import React, { Component } from \"react\";\n\nclass Error extends Component {\n  render() {\n    return (\n      <div>\n        <p>We could not get data from DB</p>\n      </div>\n    );\n  }\n}\n\nexport default Error;\n","import React, { Component } from \"react\";\nimport Error from \"../components/Error\";\nimport \"../styles/jumbo.css\";\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\n\nclass Jumbo extends Component {\n  filePath = \"http://image.tmdb.org/t/p/original\";\n  render() {\n    console.log(this.props.movies);\n    if (this.props.movies.length > 0) {\n      return (\n        <Jumbotron id=\"jumbotron\">\n          <h1 id=\"jumbo-words\">{this.props.movies[0].title}</h1>\n          <img\n            id=\"jumbo-image\"\n            src={this.filePath + this.props.movies[0].backdrop_path}\n            alt=\"movie-poster\"\n          />\n        </Jumbotron>\n      );\n    } else {\n      return <Error />;\n    }\n  }\n}\n\nexport default Jumbo;\n","import React, { Component } from \"react\";\nimport \"../styles/features.css\";\n\nclass Features extends Component {\n  filePath = \"http://image.tmdb.org/t/p/w185\";\n  render() {\n    return (\n      <div id=\"features\">\n        {this.props.movies.map((movie, i) => (\n          <div class=\"feature\" key={i}>\n            <img src={this.filePath + movie.poster_path} alt=\"movie-poster\" />\n            <p>{movie.title}</p>\n          </div>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default Features;\n","import React, { Component } from \"react\";\nimport Jumbo from \"../components/Jumbo\";\nimport Features from \"../components/Features\";\n\nclass Main extends Component {\n  render() {\n    console.table(this.props.top20);\n    if (this.props.top20 !== undefined) {\n      return (\n        <div>\n          <Jumbo movies={this.props.top20} />\n          <Features movies={this.props.top20} />\n        </div>\n      );\n    } else {\n      return (\n        <div>\n          <p>No movies to display</p>\n        </div>\n      );\n    }\n  }\n}\n\nexport default Main;\n","import React, { Component } from \"react\";\nimport Nav from \"./components/Nav\";\nimport Main from \"./components/Main\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    top20: []\n  };\n\n  componentDidMount() {\n    this.getPopularMovies();\n  }\n\n  render() {\n    return (\n      <div>\n        <Nav />\n        <Main top20={this.state.top20} />\n      </div>\n    );\n  }\n\n  setMovies(response) {\n    console.log(response);\n  }\n\n  getPopularMovies() {\n    fetch(\n      `https://api.themoviedb.org/3/discover/movie?sort_by=popularity.desc&api_key=20cd70ce9c3148c2d39b0f390f107b67`\n    )\n      .then(response => response.json())\n      .then(\n        response => this.setState({ top20: response.results }),\n        console.table(this.state.top20)\n      )\n      .catch(err => console.log(\"ERR: \", err));\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}